---
import Layout from '../layouts/Layout.astro';
import '../styles/global.css';
---

<Layout title="Calculadora de √Årbol de Decisiones">
<div class="bg-gray-100 min-h-screen py-8">
    <div class="max-w-6xl mx-auto px-4">
        <!-- Header -->
        <div class="text-center mb-12">
            <h1 class="text-5xl md:text-6xl lg:text-7xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent mb-6 leading-tight">
                üå≥ Calculadora de √Årbol de Decisiones
            </h1>
            <p class="text-xl md:text-2xl text-gray-600 mb-8 max-w-4xl mx-auto">Una herramienta moderna y potente para tomar decisiones bajo incertidumbre</p>
            
            <div class="flex justify-center flex-wrap gap-4">
                <button id="help-modal-btn" class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-200 shadow-xl hover:shadow-2xl transform hover:-translate-y-1 text-lg">
                    ‚ùì Ayuda e Instrucciones
                </button>
            </div>
        </div>

        <!-- Probabilidades -->
        <div class="bg-white rounded-lg shadow p-6 mb-6">
            <h2 class="text-xl font-semibold mb-4 text-blue-600">üéØ Probabilidades</h2>
            <div class="grid grid-cols-2 md:grid-cols-6 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Estado 1</label>
                    <input type="number" step="0.01" min="0" max="1" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 probability-input" 
                           data-index="0" placeholder="0.00">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Estado 2</label>
                    <input type="number" step="0.01" min="0" max="1" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 probability-input" 
                           data-index="1" placeholder="0.00">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Estado 3</label>
                    <input type="number" step="0.01" min="0" max="1" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 probability-input" 
                           data-index="2" placeholder="0.00">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Estado 4</label>
                    <input type="number" step="0.01" min="0" max="1" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 probability-input" 
                           data-index="3" placeholder="0.00">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Estado 5</label>
                    <input type="number" step="0.01" min="0" max="1" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 probability-input" 
                           data-index="4" placeholder="0.00">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Estado 6</label>
                    <input type="number" step="0.01" min="0" max="1" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 probability-input" 
                           data-index="5" placeholder="0.00">
                </div>
            </div>
            <div class="mt-4">
                <span class="text-sm text-gray-600">Suma total: </span>
                <span id="sum-display" class="font-semibold">0.00</span>
                <span id="sum-status" class="ml-2 text-sm"></span>
            </div>
        </div>

        <!-- Matriz de valores -->
        <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
            <h2 class="text-2xl font-bold mb-6 text-green-600">üí∞ Matriz de Valores (Payoffs)</h2>
            <div class="overflow-x-auto">
                <table class="w-full border-collapse border-2 border-gray-300 rounded-lg overflow-hidden shadow-sm">
                    <thead>
                        <tr class="bg-gradient-to-r from-green-50 to-emerald-50">
                            <th class="border border-gray-300 px-6 py-4 text-left font-bold text-gray-800 w-32 min-w-32">Acci√≥n</th>
                            <th class="border border-gray-300 px-6 py-4 font-bold text-gray-800">Estado 1</th>
                            <th class="border border-gray-300 px-6 py-4 font-bold text-gray-800">Estado 2</th>
                            <th class="border border-gray-300 px-6 py-4 font-bold text-gray-800">Estado 3</th>
                            <th class="border border-gray-300 px-6 py-4 font-bold text-gray-800">Estado 4</th>
                            <th class="border border-gray-300 px-6 py-4 font-bold text-gray-800">Estado 5</th>
                            <th class="border border-gray-300 px-6 py-4 font-bold text-gray-800">Estado 6</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="hover:bg-gray-25 transition-colors">
                            <td class="border border-gray-300 px-6 py-4 font-semibold bg-gradient-to-r from-gray-50 to-gray-100 text-gray-800 w-32 min-w-32">Acci√≥n 1</td>
                            <td class="border border-gray-300 p-2">
                                <input type="number" step="any" class="w-full px-4 py-3 text-center border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-300 rounded-md transition-all value-input" data-row="0" data-col="0" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-2">
                                <input type="number" step="any" class="w-full px-4 py-3 text-center border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-300 rounded-md transition-all value-input" data-row="0" data-col="1" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-2">
                                <input type="number" step="any" class="w-full px-4 py-3 text-center border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-300 rounded-md transition-all value-input" data-row="0" data-col="2" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-2">
                                <input type="number" step="any" class="w-full px-4 py-3 text-center border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-300 rounded-md transition-all value-input" data-row="0" data-col="3" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-2">
                                <input type="number" step="any" class="w-full px-4 py-3 text-center border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-300 rounded-md transition-all value-input" data-row="0" data-col="4" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-2">
                                <input type="number" step="any" class="w-full px-4 py-3 text-center border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-300 rounded-md transition-all value-input" data-row="0" data-col="5" placeholder="Valor">
                            </td>
                        </tr>
                        <tr class="hover:bg-gray-25 transition-colors">
                            <td class="border border-gray-300 px-6 py-4 font-semibold bg-gradient-to-r from-gray-50 to-gray-100 text-gray-800 w-32 min-w-32">Acci√≥n 2</td>
                            <td class="border border-gray-300 p-2">
                                <input type="number" step="any" class="w-full px-4 py-3 text-center border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-300 rounded-md transition-all value-input" data-row="1" data-col="0" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-2">
                                <input type="number" step="any" class="w-full px-4 py-3 text-center border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-300 rounded-md transition-all value-input" data-row="1" data-col="1" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-2">
                                <input type="number" step="any" class="w-full px-4 py-3 text-center border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-300 rounded-md transition-all value-input" data-row="1" data-col="2" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-2">
                                <input type="number" step="any" class="w-full px-4 py-3 text-center border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-300 rounded-md transition-all value-input" data-row="1" data-col="3" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-2">
                                <input type="number" step="any" class="w-full px-4 py-3 text-center border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-300 rounded-md transition-all value-input" data-row="1" data-col="4" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-2">
                                <input type="number" step="any" class="w-full px-4 py-3 text-center border-none outline-none focus:bg-blue-50 focus:ring-2 focus:ring-blue-300 rounded-md transition-all value-input" data-row="1" data-col="5" placeholder="Valor">
                            </td>
                        </tr>
                        <tr class="hover:bg-gray-25 transition-colors">
                            <td class="border border-gray-300 px-6 py-4 font-semibold bg-gradient-to-r from-gray-50 to-gray-100 text-gray-800 w-32 min-w-32">Acci√≥n 3</td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="2" data-col="0" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="2" data-col="1" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="2" data-col="2" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="2" data-col="3" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="2" data-col="4" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="2" data-col="5" placeholder="Valor">
                            </td>
                        </tr>
                        <tr class="hover:bg-gray-25 transition-colors">
                            <td class="border border-gray-300 px-6 py-4 font-semibold bg-gradient-to-r from-gray-50 to-gray-100 text-gray-800 w-32 min-w-32">Acci√≥n 4</td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="3" data-col="0" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="3" data-col="1" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="3" data-col="2" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="3" data-col="3" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="3" data-col="4" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="3" data-col="5" placeholder="Valor">
                            </td>
                        </tr>
                        <tr class="hover:bg-gray-25 transition-colors">
                            <td class="border border-gray-300 px-6 py-4 font-semibold bg-gradient-to-r from-gray-50 to-gray-100 text-gray-800 w-32 min-w-32">Acci√≥n 5</td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="4" data-col="0" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="4" data-col="1" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="4" data-col="2" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="4" data-col="3" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="4" data-col="4" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="4" data-col="5" placeholder="Valor">
                            </td>
                        </tr>
                        <tr class="hover:bg-gray-25 transition-colors">
                            <td class="border border-gray-300 px-6 py-4 font-semibold bg-gradient-to-r from-gray-50 to-gray-100 text-gray-800 w-32 min-w-32">Acci√≥n 6</td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="5" data-col="0" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="5" data-col="1" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="5" data-col="2" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="5" data-col="3" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="5" data-col="4" placeholder="Valor">
                            </td>
                            <td class="border border-gray-300 p-1">
                                <input type="number" step="any" class="w-full px-2 py-1 text-center border-none outline-none focus:bg-blue-50 value-input" data-row="5" data-col="5" placeholder="Valor">
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Botones -->
        <div class="bg-white rounded-lg shadow p-6 mb-6">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <button id="calculate-step1" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5">
                    üìä Calcular Paso 1
                </button>
                <button id="calculate-step2" class="bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-6 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none disabled:shadow-lg" disabled>
                    ‚ö° Calcular Paso 2
                </button>
                <button id="reset-all" class="bg-slate-500 hover:bg-slate-600 text-white font-medium py-3 px-6 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5">
                    üîÑ Limpiar Todo
                </button>
                <button id="export-data" class="bg-indigo-500 hover:bg-indigo-600 text-white font-medium py-3 px-6 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5">
                    üíæ Exportar Datos
                </button>
            </div>
            
            <!-- Status (sistema de notificaciones mejorado) -->
            <div id="status-message" class="mt-4 p-3 rounded-lg hidden">
                <div id="status-content"></div>
            </div>
        </div>

        <!-- Resultados -->
        <div id="results-container" class="space-y-6 hidden">
            <!-- Resultados Paso 1 -->
            <div id="results-step1" class="bg-white rounded-lg shadow p-6 hidden">
                <h2 class="text-xl font-semibold mb-4 text-blue-600">üìà Resultados - Paso 1</h2>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="bg-blue-50 rounded-lg p-4">
                        <h3 class="font-semibold text-blue-800 mb-3">üéØ Evento M√°s Probable</h3>
                        <div class="space-y-2">
                            <div>Estado: <span id="most-likely-state" class="font-bold"></span></div>
                            <div>Payoff: <span id="most-likely-payoff" class="font-bold"></span></div>
                        </div>
                    </div>
                    
                    <div class="bg-green-50 rounded-lg p-4">
                        <h3 class="font-semibold text-green-800 mb-3">üí∞ Pago Esperado M√°ximo</h3>
                        <div class="space-y-2">
                            <div>Mejor Acci√≥n: <span id="best-action" class="font-bold"></span></div>
                            <div>Pago Esperado: <span id="expected-payoff" class="font-bold"></span></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Resultados Paso 2 -->
            <div id="results-step2" class="bg-white rounded-lg shadow p-6 hidden">
                <h2 class="text-xl font-semibold mb-4 text-green-600">‚ö° Resultados - Paso 2</h2>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="bg-purple-50 rounded-lg p-4">
                        <h3 class="font-semibold text-purple-800 mb-3">üé≤ M√≠nimo Arrepentimiento</h3>
                        <div class="space-y-2">
                            <div>Acci√≥n: <span id="regret-action" class="font-bold"></span></div>
                            <div>Arrepentimiento: <span id="regret-value" class="font-bold"></span></div>
                        </div>
                    </div>
                    
                    <div class="bg-yellow-50 rounded-lg p-4">
                        <h3 class="font-semibold text-yellow-800 mb-3">üìä Informaci√≥n Perfecta</h3>
                        <div class="space-y-2">
                            <div>Retorno Perfecto: <span id="perfect-return" class="font-bold"></span></div>
                            <div>VPI: <span id="vpi-value" class="font-bold"></span></div>
                        </div>
                    </div>
                    
                    <div class="bg-indigo-50 rounded-lg p-4">
                        <h3 class="font-semibold text-indigo-800 mb-3">üìà Eficiencia</h3>
                        <div class="space-y-2">
                            <div>Eficiencia: <span id="efficiency" class="font-bold"></span></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Generador de Datos de Prueba -->
        <div class="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg shadow p-6 text-white">
            <h2 class="text-xl font-semibold mb-4">üé≤ Generador de Datos de Prueba</h2>
            <p class="text-blue-100 mb-4">Genera autom√°ticamente probabilidades v√°lidas y valores realistas para probar la calculadora</p>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 mb-4">
                <button id="generate-simple" class="bg-emerald-500 hover:bg-emerald-600 text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5">
                    üéØ Caso Simple (3 estados)
                </button>
                <button id="generate-balanced" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5">
                    ‚öñÔ∏è Caso Balanceado (4 estados)
                </button>
                <button id="generate-complex" class="bg-purple-500 hover:bg-purple-600 text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5">
                    üß© Caso Complejo (5-6 estados)
                </button>
                <button id="generate-extreme" class="bg-amber-500 hover:bg-amber-600 text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5">
                    üöÄ Valores Extremos
                </button>
            </div>          
        </div>
    </div>
</div>

<script>
        // @ts-nocheck
        // Clase para calcular √°rbol de decisiones
        class DecisionTreeCalculator {
            constructor(probabilities, values) {
                this.probabilities = probabilities;
                this.values = values;
            }

            validateProbabilities() {
                const sum = this.probabilities.reduce((acc, val) => acc + val, 0);
                return Math.abs(sum - 1.0) < 0.0000000001;
            }

            validateData() {
                const totalCells = this.values.flat().filter(val => !isNaN(val) && val !== null && val !== '').length;
                return totalCells >= 4;
            }

            calculateStep1() {
                if (!this.validateProbabilities()) {
                    throw new Error('Las probabilidades deben sumar exactamente 1.00');
                }
                if (!this.validateData()) {
                    throw new Error('Se necesitan al menos 4 valores en la matriz');
                }

                // Calcular pago esperado para cada acci√≥n
                const expectedPayoffs = [];
                for (let row = 0; row < this.values.length; row++) {
                    let sum = 0;
                    let hasValues = false;
                    for (let col = 0; col < this.probabilities.length; col++) {
                        if (!isNaN(this.values[row][col]) && this.values[row][col] !== null && this.values[row][col] !== '') {
                            sum += parseFloat(this.values[row][col]) * this.probabilities[col];
                            hasValues = true;
                        }
                    }
                    if (hasValues) expectedPayoffs.push(sum);
                }

                // Encontrar la acci√≥n con mayor pago esperado
                const maxExpectedPayoff = Math.max(...expectedPayoffs);
                const bestActionIndex = expectedPayoffs.indexOf(maxExpectedPayoff);

                // Encontrar la probabilidad m√°s alta
                const maxProbability = Math.max(...this.probabilities);
                const mostLikelyStateIndex = this.probabilities.indexOf(maxProbability);
                
                // Encontrar el mejor pago en la columna del estado m√°s probable
                const columnValues = [];
                for (let row = 0; row < this.values.length; row++) {
                    const val = this.values[row][mostLikelyStateIndex];
                    if (!isNaN(val) && val !== null && val !== '') {
                        columnValues.push(parseFloat(val));
                    }
                }
                const maxPayoffInColumn = Math.max(...columnValues);

                return {
                    mostLikelyEvent: {
                        state: mostLikelyStateIndex + 1,
                        payoff: maxPayoffInColumn
                    },
                    expectedPayoff: {
                        action: bestActionIndex + 1,
                        payoff: maxExpectedPayoff
                    }
                };
            }

            calculateStep2() {
                const step1Results = this.calculateStep1();
                
                // Encontrar el m√°ximo en cada columna
                const columnMaxes = [];
                for (let col = 0; col < this.probabilities.length; col++) {
                    const columnValues = [];
                    for (let row = 0; row < this.values.length; row++) {
                        const val = this.values[row][col];
                        if (!isNaN(val) && val !== null && val !== '') {
                            columnValues.push(parseFloat(val));
                        }
                    }
                    if (columnValues.length > 0) {
                        columnMaxes.push(Math.max(...columnValues));
                    } else {
                        columnMaxes.push(0);
                    }
                }

                // Crear matriz de arrepentimiento y calcular arrepentimientos esperados
                const expectedRegrets = [];
                for (let row = 0; row < this.values.length; row++) {
                    let sum = 0;
                    let hasValues = false;
                    for (let col = 0; col < this.probabilities.length; col++) {
                        const val = this.values[row][col];
                        if (!isNaN(val) && val !== null && val !== '') {
                            const regret = columnMaxes[col] - parseFloat(val);
                            sum += regret * this.probabilities[col];
                            hasValues = true;
                        }
                    }
                    if (hasValues) expectedRegrets.push(sum);
                }

                // Encontrar el m√≠nimo arrepentimiento esperado
                const minExpectedRegret = Math.min(...expectedRegrets);
                const bestRegretActionIndex = expectedRegrets.indexOf(minExpectedRegret);

                // Calcular valor de informaci√≥n perfecta
                const perfectReturn = columnMaxes.reduce((sum, max, index) => sum + max * this.probabilities[index], 0);
                const vpi = perfectReturn - step1Results.expectedPayoff.payoff;
                const efficiency = (vpi / perfectReturn) * 100;

                return {
                    minExpectedRegret: {
                        action: bestRegretActionIndex + 1,
                        value: minExpectedRegret
                    },
                    perfectInformation: {
                        return: perfectReturn,
                        vpi: vpi,
                        efficiency: efficiency
                    }
                };
            }
        }

        // Variables globales
        let step1Results = null;

        // Funciones de utilidad
        function gatherData() {
            // Recopilar probabilidades
            const probabilities = [];
            document.querySelectorAll('.probability-input').forEach(input => {
                const value = parseFloat(input.value) || 0;
                probabilities.push(value);
            });

            // Recopilar valores de la matriz
            const values = Array(6).fill(null).map(() => Array(6).fill(NaN));
            document.querySelectorAll('.value-input').forEach(input => {
                const row = parseInt(input.dataset.row);
                const col = parseInt(input.dataset.col);
                const value = input.value.trim() === '' ? NaN : parseFloat(input.value);
                if (!isNaN(row) && !isNaN(col)) {
                    values[row][col] = value;
                }
            });

            return { probabilities, values };
        }

        // Sistema de notificaciones toast moderno
        let toastCounter = 0;
        
        function showStatus(type, message) {
            const toastContainer = document.getElementById('toast-container');
            const toastId = `toast-${++toastCounter}`;
            
            // Configuraci√≥n de estilos seg√∫n el tipo
            const toastStyles = {
                success: {
                    bgColor: 'bg-green-50',
                    borderColor: 'border-green-200',
                    textColor: 'text-green-800',
                    icon: '‚úÖ',
                    iconBg: 'bg-green-100'
                },
                error: {
                    bgColor: 'bg-red-50',
                    borderColor: 'border-red-200', 
                    textColor: 'text-red-800',
                    icon: '‚ùå',
                    iconBg: 'bg-red-100'
                },
                info: {
                    bgColor: 'bg-blue-50',
                    borderColor: 'border-blue-200',
                    textColor: 'text-blue-800', 
                    icon: '‚ÑπÔ∏è',
                    iconBg: 'bg-blue-100'
                },
                warning: {
                    bgColor: 'bg-yellow-50',
                    borderColor: 'border-yellow-200',
                    textColor: 'text-yellow-800',
                    icon: '‚ö†Ô∏è',
                    iconBg: 'bg-yellow-100'
                }
            };
            
            const style = toastStyles[type] || toastStyles.info;
            
            // Crear el elemento toast
            const toast = document.createElement('div');
            toast.id = toastId;
            toast.className = `
                ${style.bgColor} ${style.borderColor} ${style.textColor}
                border-l-4 rounded-lg shadow-xl p-4 mb-2
                transform translate-x-full transition-all duration-300 ease-out
                flex items-start space-x-3 relative backdrop-blur-sm
                hover:shadow-2xl cursor-pointer
            `;
            
            toast.innerHTML = `
                <div class="${style.iconBg} rounded-full p-2 flex-shrink-0 shadow-sm">
                    <span class="text-lg">${style.icon}</span>
                </div>
                <div class="flex-1 min-w-0">
                    <p class="text-sm font-medium break-words leading-relaxed">${message}</p>
                </div>
                <button onclick="closeToast('${toastId}')" class="flex-shrink-0 ml-2 p-1 rounded-full text-gray-400 hover:text-gray-600 hover:bg-gray-100 transition-all duration-200 toast-close">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            `;
            
            // A√±adir al contenedor
            toastContainer.appendChild(toast);
            
            // Animar entrada
            setTimeout(() => {
                toast.classList.remove('translate-x-full');
                toast.classList.add('translate-x-0');
            }, 10);
            
            // Auto-cerrar despu√©s de 5 segundos
            setTimeout(() => {
                closeToast(toastId);
            }, 5000);
        }
        
        function closeToast(toastId) {
            const toast = document.getElementById(toastId);
            if (toast) {
                toast.classList.add('translate-x-full', 'opacity-0');
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }
        }
        
        // Hacer closeToast accesible globalmente para los botones
        window.closeToast = closeToast;

        function updateProbabilitySum() {
            let sum = 0;
            document.querySelectorAll('.probability-input').forEach(input => {
                sum += parseFloat(input.value) || 0;
            });
            
            const sumDisplay = document.getElementById('sum-display');
            const sumStatus = document.getElementById('sum-status');
            
            sumDisplay.textContent = sum.toFixed(2);
            
            if (Math.abs(sum - 1.0) < 0.01) {
                sumStatus.innerHTML = '<span class="text-green-600">‚úì Correcto</span>';
            } else {
                sumStatus.innerHTML = '<span class="text-red-600">‚ö† Debe sumar 1.00</span>';
            }
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Actualizar suma de probabilidades
            document.querySelectorAll('.probability-input').forEach(input => {
                input.addEventListener('input', updateProbabilitySum);
            });

            // Calcular Paso 1
            document.getElementById('calculate-step1').addEventListener('click', function() {
                try {
                    const data = gatherData();
                    const calculator = new DecisionTreeCalculator(data.probabilities, data.values);
                    step1Results = calculator.calculateStep1();
                    
                    // Mostrar resultados
                    document.getElementById('results-container').classList.remove('hidden');
                    document.getElementById('results-step1').classList.remove('hidden');
                    
                    document.getElementById('most-likely-state').textContent = step1Results.mostLikelyEvent.state;
                    document.getElementById('most-likely-payoff').textContent = step1Results.mostLikelyEvent.payoff.toFixed(2);
                    document.getElementById('best-action').textContent = step1Results.expectedPayoff.action;
                    document.getElementById('expected-payoff').textContent = step1Results.expectedPayoff.payoff.toFixed(2);
                    
                    // Habilitar paso 2
                    document.getElementById('calculate-step2').disabled = false;
                    
                    showStatus('success', 'Paso 1 calculado correctamente');
                    
                    // Scroll to results
                    document.getElementById('results-container').scrollIntoView({ behavior: 'smooth' });
                } catch (error) {
                    showStatus('error', error.message);
                }
            });

            // Calcular Paso 2
            document.getElementById('calculate-step2').addEventListener('click', function() {
                try {
                    const data = gatherData();
                    const calculator = new DecisionTreeCalculator(data.probabilities, data.values);
                    const step2Results = calculator.calculateStep2();
                    
                    // Mostrar resultados
                    document.getElementById('results-step2').classList.remove('hidden');
                    
                    document.getElementById('regret-action').textContent = step2Results.minExpectedRegret.action;
                    document.getElementById('regret-value').textContent = step2Results.minExpectedRegret.value.toFixed(4);
                    document.getElementById('perfect-return').textContent = step2Results.perfectInformation.return.toFixed(2);
                    document.getElementById('vpi-value').textContent = step2Results.perfectInformation.vpi.toFixed(4);
                    document.getElementById('efficiency').textContent = step2Results.perfectInformation.efficiency.toFixed(2) + '%';
                    
                    showStatus('success', 'Paso 2 calculado correctamente');
                    
                    // Scroll to results
                    document.getElementById('results-step2').scrollIntoView({ behavior: 'smooth' });
                } catch (error) {
                    showStatus('error', error.message);
                }
            });

            // Reset
            document.getElementById('reset-all').addEventListener('click', function() {
                // Limpiar inputs
                document.querySelectorAll('input').forEach(input => {
                    input.value = '';
                });
                
                // Ocultar resultados
                document.getElementById('results-container').classList.add('hidden');
                document.getElementById('results-step1').classList.add('hidden');
                document.getElementById('results-step2').classList.add('hidden');
                
                // Deshabilitar paso 2
                document.getElementById('calculate-step2').disabled = true;
                
                updateProbabilitySum();
                showStatus('success', 'üßπ Todos los datos han sido limpiados correctamente');
            });

            // Funciones generadoras de datos aleatorios
            function generateRandomProbabilities(numStates) {
                const probabilities = new Array(6).fill(0);
                
                // Generar valores aleatorios para los estados activos
                const randomValues = [];
                for (let i = 0; i < numStates; i++) {
                    randomValues.push(Math.random());
                }
                
                // Normalizar para que sumen 1
                const sum = randomValues.reduce((a, b) => a + b, 0);
                for (let i = 0; i < numStates; i++) {
                    probabilities[i] = randomValues[i] / sum;
                }
                
                return probabilities;
            }
            
            function generateRandomValues(numStates, numActions, minValue = 10, maxValue = 1000, includeNegatives = false) {
                const values = Array(6).fill(null).map(() => Array(6).fill(NaN));
                
                for (let row = 0; row < numActions; row++) {
                    for (let col = 0; col < numStates; col++) {
                        let value = Math.floor(Math.random() * (maxValue - minValue + 1)) + minValue;
                        if (includeNegatives && Math.random() < 0.3) {
                            value = -value;
                        }
                        values[row][col] = value;
                    }
                }
                
                return values;
            }
            
            function loadGeneratedData(probabilities, values) {
                // Cargar probabilidades
                const probInputs = document.querySelectorAll('.probability-input');
                probInputs.forEach((input, index) => {
                    input.value = probabilities[index] > 0 ? probabilities[index].toFixed(3) : '';
                });
                
                // Cargar valores de la matriz
                document.querySelectorAll('.value-input').forEach(input => {
                    const row = parseInt(input.dataset.row);
                    const col = parseInt(input.dataset.col);
                    const value = values[row][col];
                    input.value = !isNaN(value) ? value.toString() : '';
                });
                
                updateProbabilitySum();
            }
            
            // Generadores espec√≠ficos
            document.getElementById('generate-simple')?.addEventListener('click', function() {
                const probabilities = generateRandomProbabilities(3);
                const values = generateRandomValues(3, 3, 50, 200);
                loadGeneratedData(probabilities, values);
                showStatus('success', 'üéØ Caso simple generado (3 estados, 3 acciones)');
            });
            
            document.getElementById('generate-balanced')?.addEventListener('click', function() {
                const probabilities = generateRandomProbabilities(4);
                const values = generateRandomValues(4, 4, 25, 300);
                loadGeneratedData(probabilities, values);
                showStatus('success', '‚öñÔ∏è Caso balanceado generado (4 estados, 4 acciones)');
            });
            
            document.getElementById('generate-complex')?.addEventListener('click', function() {
                const numStates = 5 + Math.floor(Math.random() * 2); // 5 o 6 estados
                const probabilities = generateRandomProbabilities(numStates);
                const values = generateRandomValues(numStates, 5, 10, 500);
                loadGeneratedData(probabilities, values);
                showStatus('success', `üß© Caso complejo generado (${numStates} estados, 5 acciones)`);
            });
            
            document.getElementById('generate-extreme')?.addEventListener('click', function() {
                const probabilities = generateRandomProbabilities(6);
                const values = generateRandomValues(6, 6, 1, 10000, true); // Incluye valores negativos
                loadGeneratedData(probabilities, values);
                showStatus('info', 'üöÄ Valores extremos generados (incluye negativos y rangos amplios)');
            });
            
            // Modal de ayuda
            const helpModal = document.getElementById('help-modal');
            const helpModalBtn = document.getElementById('help-modal-btn');
            const closeModalBtn = document.getElementById('close-modal');
            const closeModalBtnFooter = document.getElementById('close-modal-btn');
            const modalOverlay = document.getElementById('modal-overlay');
            
            helpModalBtn?.addEventListener('click', function() {
                helpModal.classList.remove('hidden');
                helpModal.classList.add('flex');
                document.body.style.overflow = 'hidden';
                
                // Animaci√≥n de entrada
                setTimeout(() => {
                    const modalContent = document.getElementById('modal-content');
                    if (modalContent) {
                        modalContent.classList.remove('scale-95', 'opacity-0');
                        modalContent.classList.add('scale-100', 'opacity-100');
                    }
                }, 10);
            });
            
            function closeModal() {
                const modalContent = document.getElementById('modal-content');
                if (modalContent) {
                    modalContent.classList.remove('scale-100', 'opacity-100');
                    modalContent.classList.add('scale-95', 'opacity-0');
                }
                
                setTimeout(() => {
                    helpModal.classList.add('hidden');
                    helpModal.classList.remove('flex');
                    document.body.style.overflow = 'auto';
                }, 300);
            }
            
            closeModalBtn?.addEventListener('click', closeModal);
            closeModalBtnFooter?.addEventListener('click', closeModal);
            modalOverlay?.addEventListener('click', closeModal);
            
            // Cerrar modal con ESC
            document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape' && !helpModal.classList.contains('hidden')) {
                    closeModal();
                }
            });
            
            // Funci√≥n para exportar datos (reutilizable)
            function exportData() {
                try {
                    const data = gatherData();
                    const exportData = {
                        probabilities: data.probabilities,
                        values: data.values,
                        timestamp: new Date().toISOString(),
                        version: '1.0'
                    };
                    
                    const jsonString = JSON.stringify(exportData, null, 2);
                    const blob = new Blob([jsonString], { type: 'application/json' });
                    const url = URL.createObjectURL(blob);
                    
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `decision-tree-${new Date().toISOString().slice(0,10)}.json`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                    
                    showStatus('success', 'üíæ Datos exportados correctamente');
                } catch (error) {
                    showStatus('error', 'Error al exportar datos');
                }
            }
            
            // Exportar datos (bot√≥n principal)
            document.getElementById('export-data')?.addEventListener('click', exportData);
            
            // Exportar datos (bot√≥n header)
            document.getElementById('export-data-header')?.addEventListener('click', exportData);

            // Inicializar suma
            updateProbabilitySum();
        });
    </script>

    <!-- Modal de Ayuda e Instrucciones -->
    <div id="help-modal" class="fixed inset-0 z-50 hidden items-center justify-center p-4 bg-gradient-to-br from-blue-900/20 via-purple-900/30 to-indigo-900/20 backdrop-blur-sm">
        <div id="modal-overlay" class="absolute inset-0"></div>
        <div class="relative modal-glass rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden transform transition-all duration-300 ease-out scale-95 opacity-0" id="modal-content">
            <!-- Header del Modal -->
            <div class="bg-gradient-to-r from-blue-500/90 to-indigo-500/90 backdrop-blur-sm px-6 py-4">
                <div class="flex items-center justify-between">
                    <h3 class="text-xl font-bold text-white">üìö Gu√≠a de Uso - Calculadora de √Årbol de Decisiones</h3>
                    <button id="close-modal" class="text-white hover:text-gray-200 transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>
            
            <!-- Contenido del Modal -->
            <div class="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
                <div class="space-y-4">
                    
                    <!-- Introducci√≥n compacta -->
                    <div class="bg-blue-50 rounded-lg p-4">
                        <h4 class="text-lg font-bold text-blue-800 mb-2">üéØ ¬øC√≥mo usar la calculadora?</h4>
                        <p class="text-blue-700">Herramienta para tomar decisiones bajo incertidumbre usando probabilidades y valores esperados.</p>
                    </div>

                    <!-- Pasos simplificados -->
                    <div class="grid md:grid-cols-2 gap-3">
                        
                        <!-- Paso 1: Probabilidades -->
                        <div class="bg-green-50 rounded-lg p-3">
                            <h4 class="font-bold text-green-800 mb-2">üìä Probabilidades</h4>
                            <p class="text-green-700 text-sm">Ingresa probabilidades que sumen <strong>1.0</strong></p>
                        </div>

                        <!-- Paso 2: Valores -->
                        <div class="bg-purple-50 rounded-lg p-3">
                            <h4 class="font-bold text-purple-800 mb-2">üí∞ Matriz de Valores</h4>
                            <p class="text-purple-700 text-sm">Filas=Acciones, Columnas=Estados</p>
                        </div>

                        <!-- C√°lculos -->
                        <div class="bg-yellow-50 rounded-lg p-3">
                            <h4 class="font-bold text-yellow-800 mb-2">‚ö° C√°lculos</h4>
                            <p class="text-yellow-700 text-sm">Autom√°ticos: valor esperado y VPI</p>
                        </div>

                        <!-- Generadores -->
                        <div class="bg-indigo-50 rounded-lg p-3">
                            <h4 class="font-bold text-indigo-800 mb-2">üé≤ Generadores</h4>
                            <p class="text-indigo-700 text-sm">4 tipos: Simple ‚Üí Extremo</p>
                        </div>
                    </div>

                    <!-- Pasos r√°pidos -->
                    <div class="bg-gray-50 rounded-lg p-3">
                        <h4 class="font-bold text-gray-800 mb-2">‚ö° Pasos R√°pidos</h4>
                        <p class="text-gray-700 text-sm">1. Ingresa probabilidades ‚Üí 2. Completa matriz ‚Üí 3. Calcula ‚Üí 4. Analiza resultados</p>
                    </div>

                </div>
            </div>
            
            <!-- Footer del Modal -->
            <div class="bg-gray-50/80 backdrop-blur-sm px-6 py-4 border-t border-gray-200/50">
                <div class="flex justify-end">
                    <button id="close-modal-btn" class="bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-lg transition-colors">
                        Entendido ‚úÖ
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Contenedor de notificaciones toast -->
    <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2 max-w-sm w-full">
    </div>
</Layout>